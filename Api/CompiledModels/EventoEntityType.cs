// <auto-generated />
using System;
using System.Reflection;
using Api.Reportes;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Api.CompiledModels
{
    internal partial class EventoEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Api.Reportes.Evento",
                typeof(Evento),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(Evento).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = SqliteGuidTypeMapping.Default;

            var categoria = runtimeEntityType.AddProperty(
                "Categoria",
                typeof(string),
                propertyInfo: typeof(Evento).GetProperty("Categoria", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<Categoria>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            categoria.TypeMapping = SqliteStringTypeMapping.Default;

            var cerradoPor = runtimeEntityType.AddProperty(
                "CerradoPor",
                typeof(string),
                propertyInfo: typeof(Evento).GetProperty("CerradoPor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<CerradoPor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cerradoPor.TypeMapping = SqliteStringTypeMapping.Default;

            var coordenadas = runtimeEntityType.AddProperty(
                "Coordenadas",
                typeof(string),
                propertyInfo: typeof(Evento).GetProperty("Coordenadas", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<Coordenadas>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            coordenadas.TypeMapping = SqliteStringTypeMapping.Default;

            var creadoPor = runtimeEntityType.AddProperty(
                "CreadoPor",
                typeof(string),
                propertyInfo: typeof(Evento).GetProperty("CreadoPor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<CreadoPor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creadoPor.TypeMapping = SqliteStringTypeMapping.Default;

            var fechaFin = runtimeEntityType.AddProperty(
                "FechaFin",
                typeof(DateTime),
                propertyInfo: typeof(Evento).GetProperty("FechaFin", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<FechaFin>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            fechaFin.TypeMapping = SqliteDateTimeTypeMapping.Default;

            var fechaInicio = runtimeEntityType.AddProperty(
                "FechaInicio",
                typeof(DateTime),
                propertyInfo: typeof(Evento).GetProperty("FechaInicio", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<FechaInicio>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            fechaInicio.TypeMapping = SqliteDateTimeTypeMapping.Default;

            var impacto = runtimeEntityType.AddProperty(
                "Impacto",
                typeof(bool),
                propertyInfo: typeof(Evento).GetProperty("Impacto", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<Impacto>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            impacto.TypeMapping = BoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var mapaUrl = runtimeEntityType.AddProperty(
                "MapaUrl",
                typeof(string),
                propertyInfo: typeof(Evento).GetProperty("MapaUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<MapaUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mapaUrl.TypeMapping = SqliteStringTypeMapping.Default;

            var prioridad = runtimeEntityType.AddProperty(
                "Prioridad",
                typeof(string),
                propertyInfo: typeof(Evento).GetProperty("Prioridad", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<Prioridad>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            prioridad.TypeMapping = SqliteStringTypeMapping.Default;

            var puestoSeguridad = runtimeEntityType.AddProperty(
                "PuestoSeguridad",
                typeof(string),
                propertyInfo: typeof(Evento).GetProperty("PuestoSeguridad", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<PuestoSeguridad>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            puestoSeguridad.TypeMapping = SqliteStringTypeMapping.Default;

            var tipoEvento = runtimeEntityType.AddProperty(
                "TipoEvento",
                typeof(string),
                propertyInfo: typeof(Evento).GetProperty("TipoEvento", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<TipoEvento>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            tipoEvento.TypeMapping = SqliteStringTypeMapping.Default;

            var tipoEventoImagen = runtimeEntityType.AddProperty(
                "TipoEventoImagen",
                typeof(string),
                propertyInfo: typeof(Evento).GetProperty("TipoEventoImagen", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<TipoEventoImagen>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            tipoEventoImagen.TypeMapping = SqliteStringTypeMapping.Default;

            var titulo = runtimeEntityType.AddProperty(
                "Titulo",
                typeof(string),
                propertyInfo: typeof(Evento).GetProperty("Titulo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Evento).GetField("<Titulo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            titulo.TypeMapping = SqliteStringTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Eventos");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
