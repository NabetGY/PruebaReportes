// <auto-generated />
using System;
using System.Reflection;
using Api.Reportes;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Api.CompiledModels
{
    internal partial class AvisoSapPmEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Api.Reportes.AvisoSapPm",
                typeof(AvisoSapPm),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(AvisoSapPm).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = SqliteGuidTypeMapping.Default;

            var descripcionCorta = runtimeEntityType.AddProperty(
                "DescripcionCorta",
                typeof(string),
                propertyInfo: typeof(AvisoSapPm).GetProperty("DescripcionCorta", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<DescripcionCorta>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            descripcionCorta.TypeMapping = SqliteStringTypeMapping.Default;

            var equipoContinuaOperando = runtimeEntityType.AddProperty(
                "EquipoContinuaOperando",
                typeof(bool),
                propertyInfo: typeof(AvisoSapPm).GetProperty("EquipoContinuaOperando", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<EquipoContinuaOperando>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            equipoContinuaOperando.TypeMapping = BoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var eventoId = runtimeEntityType.AddProperty(
                "EventoId",
                typeof(Guid),
                propertyInfo: typeof(AvisoSapPm).GetProperty("EventoId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<EventoId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            eventoId.TypeMapping = SqliteGuidTypeMapping.Default;

            var fechaIncioAveria = runtimeEntityType.AddProperty(
                "FechaIncioAveria",
                typeof(DateOnly),
                propertyInfo: typeof(AvisoSapPm).GetProperty("FechaIncioAveria", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<FechaIncioAveria>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateOnly(1, 1, 1));
            fechaIncioAveria.TypeMapping = SqliteDateOnlyTypeMapping.Default;

            var horaInicioAveria = runtimeEntityType.AddProperty(
                "HoraInicioAveria",
                typeof(TimeOnly),
                propertyInfo: typeof(AvisoSapPm).GetProperty("HoraInicioAveria", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<HoraInicioAveria>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new TimeOnly(0, 0, 0));
            horaInicioAveria.TypeMapping = SqliteTimeOnlyTypeMapping.Default;

            var modoFalla = runtimeEntityType.AddProperty(
                "ModoFalla",
                typeof(string),
                propertyInfo: typeof(AvisoSapPm).GetProperty("ModoFalla", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<ModoFalla>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modoFalla.TypeMapping = SqliteStringTypeMapping.Default;

            var modoFallaImg = runtimeEntityType.AddProperty(
                "ModoFallaImg",
                typeof(string),
                propertyInfo: typeof(AvisoSapPm).GetProperty("ModoFallaImg", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<ModoFallaImg>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modoFallaImg.TypeMapping = SqliteStringTypeMapping.Default;

            var parteObjectoAfectada = runtimeEntityType.AddProperty(
                "ParteObjectoAfectada",
                typeof(string),
                propertyInfo: typeof(AvisoSapPm).GetProperty("ParteObjectoAfectada", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<ParteObjectoAfectada>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            parteObjectoAfectada.TypeMapping = SqliteStringTypeMapping.Default;

            var parteObjectoAfectadaImg = runtimeEntityType.AddProperty(
                "ParteObjectoAfectadaImg",
                typeof(string),
                propertyInfo: typeof(AvisoSapPm).GetProperty("ParteObjectoAfectadaImg", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<ParteObjectoAfectadaImg>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            parteObjectoAfectadaImg.TypeMapping = SqliteStringTypeMapping.Default;

            var solucionadoPorBEC = runtimeEntityType.AddProperty(
                "SolucionadoPorBEC",
                typeof(bool),
                propertyInfo: typeof(AvisoSapPm).GetProperty("SolucionadoPorBEC", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<SolucionadoPorBEC>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            solucionadoPorBEC.TypeMapping = BoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var ubicacionTecnica = runtimeEntityType.AddProperty(
                "UbicacionTecnica",
                typeof(string),
                propertyInfo: typeof(AvisoSapPm).GetProperty("UbicacionTecnica", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<UbicacionTecnica>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            ubicacionTecnica.TypeMapping = SqliteStringTypeMapping.Default;

            var ubicacionTecnicaImg = runtimeEntityType.AddProperty(
                "UbicacionTecnicaImg",
                typeof(string),
                propertyInfo: typeof(AvisoSapPm).GetProperty("UbicacionTecnicaImg", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AvisoSapPm).GetField("<UbicacionTecnicaImg>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            ubicacionTecnicaImg.TypeMapping = SqliteStringTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "AvisosSapPm");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
