// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Api.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var avisoSapPm = AvisoSapPmEntityType.Create(this);
            var avisoY2 = AvisoY2EntityType.Create(this);
            var evento = EventoEntityType.Create(this);
            var firma = FirmaEntityType.Create(this);

            AvisoSapPmEntityType.CreateAnnotations(avisoSapPm);
            AvisoY2EntityType.CreateAnnotations(avisoY2);
            EventoEntityType.CreateAnnotations(evento);
            FirmaEntityType.CreateAnnotations(firma);

            AddAnnotation("ProductVersion", "8.0.6");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var avisoSapPm = FindEntityType("Api.Reportes.AvisoSapPm")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            avisoSapPm.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var apiReportesAvisoSapPmTableBase = new TableBase("Api.Reportes.AvisoSapPm", null, relationalModel);
            var descripcionCortaColumnBase = new ColumnBase<ColumnMappingBase>("DescripcionCorta", "TEXT", apiReportesAvisoSapPmTableBase)
            {
                IsNullable = true
            };
            apiReportesAvisoSapPmTableBase.Columns.Add("DescripcionCorta", descripcionCortaColumnBase);
            var equipoContinuaOperandoColumnBase = new ColumnBase<ColumnMappingBase>("EquipoContinuaOperando", "INTEGER", apiReportesAvisoSapPmTableBase);
            apiReportesAvisoSapPmTableBase.Columns.Add("EquipoContinuaOperando", equipoContinuaOperandoColumnBase);
            var eventoIdColumnBase = new ColumnBase<ColumnMappingBase>("EventoId", "TEXT", apiReportesAvisoSapPmTableBase);
            apiReportesAvisoSapPmTableBase.Columns.Add("EventoId", eventoIdColumnBase);
            var fechaIncioAveriaColumnBase = new ColumnBase<ColumnMappingBase>("FechaIncioAveria", "TEXT", apiReportesAvisoSapPmTableBase);
            apiReportesAvisoSapPmTableBase.Columns.Add("FechaIncioAveria", fechaIncioAveriaColumnBase);
            var horaInicioAveriaColumnBase = new ColumnBase<ColumnMappingBase>("HoraInicioAveria", "TEXT", apiReportesAvisoSapPmTableBase);
            apiReportesAvisoSapPmTableBase.Columns.Add("HoraInicioAveria", horaInicioAveriaColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "TEXT", apiReportesAvisoSapPmTableBase);
            apiReportesAvisoSapPmTableBase.Columns.Add("Id", idColumnBase);
            var modoFallaColumnBase = new ColumnBase<ColumnMappingBase>("ModoFalla", "TEXT", apiReportesAvisoSapPmTableBase)
            {
                IsNullable = true
            };
            apiReportesAvisoSapPmTableBase.Columns.Add("ModoFalla", modoFallaColumnBase);
            var modoFallaImgColumnBase = new ColumnBase<ColumnMappingBase>("ModoFallaImg", "TEXT", apiReportesAvisoSapPmTableBase)
            {
                IsNullable = true
            };
            apiReportesAvisoSapPmTableBase.Columns.Add("ModoFallaImg", modoFallaImgColumnBase);
            var parteObjectoAfectadaColumnBase = new ColumnBase<ColumnMappingBase>("ParteObjectoAfectada", "TEXT", apiReportesAvisoSapPmTableBase)
            {
                IsNullable = true
            };
            apiReportesAvisoSapPmTableBase.Columns.Add("ParteObjectoAfectada", parteObjectoAfectadaColumnBase);
            var parteObjectoAfectadaImgColumnBase = new ColumnBase<ColumnMappingBase>("ParteObjectoAfectadaImg", "TEXT", apiReportesAvisoSapPmTableBase)
            {
                IsNullable = true
            };
            apiReportesAvisoSapPmTableBase.Columns.Add("ParteObjectoAfectadaImg", parteObjectoAfectadaImgColumnBase);
            var solucionadoPorBECColumnBase = new ColumnBase<ColumnMappingBase>("SolucionadoPorBEC", "INTEGER", apiReportesAvisoSapPmTableBase);
            apiReportesAvisoSapPmTableBase.Columns.Add("SolucionadoPorBEC", solucionadoPorBECColumnBase);
            var ubicacionTecnicaColumnBase = new ColumnBase<ColumnMappingBase>("UbicacionTecnica", "TEXT", apiReportesAvisoSapPmTableBase)
            {
                IsNullable = true
            };
            apiReportesAvisoSapPmTableBase.Columns.Add("UbicacionTecnica", ubicacionTecnicaColumnBase);
            var ubicacionTecnicaImgColumnBase = new ColumnBase<ColumnMappingBase>("UbicacionTecnicaImg", "TEXT", apiReportesAvisoSapPmTableBase)
            {
                IsNullable = true
            };
            apiReportesAvisoSapPmTableBase.Columns.Add("UbicacionTecnicaImg", ubicacionTecnicaImgColumnBase);
            relationalModel.DefaultTables.Add("Api.Reportes.AvisoSapPm", apiReportesAvisoSapPmTableBase);
            var apiReportesAvisoSapPmMappingBase = new TableMappingBase<ColumnMappingBase>(avisoSapPm, apiReportesAvisoSapPmTableBase, true);
            apiReportesAvisoSapPmTableBase.AddTypeMapping(apiReportesAvisoSapPmMappingBase, false);
            defaultTableMappings.Add(apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, avisoSapPm.FindProperty("Id")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descripcionCortaColumnBase, avisoSapPm.FindProperty("DescripcionCorta")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)equipoContinuaOperandoColumnBase, avisoSapPm.FindProperty("EquipoContinuaOperando")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventoIdColumnBase, avisoSapPm.FindProperty("EventoId")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fechaIncioAveriaColumnBase, avisoSapPm.FindProperty("FechaIncioAveria")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)horaInicioAveriaColumnBase, avisoSapPm.FindProperty("HoraInicioAveria")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modoFallaColumnBase, avisoSapPm.FindProperty("ModoFalla")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modoFallaImgColumnBase, avisoSapPm.FindProperty("ModoFallaImg")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parteObjectoAfectadaColumnBase, avisoSapPm.FindProperty("ParteObjectoAfectada")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parteObjectoAfectadaImgColumnBase, avisoSapPm.FindProperty("ParteObjectoAfectadaImg")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)solucionadoPorBECColumnBase, avisoSapPm.FindProperty("SolucionadoPorBEC")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ubicacionTecnicaColumnBase, avisoSapPm.FindProperty("UbicacionTecnica")!, apiReportesAvisoSapPmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ubicacionTecnicaImgColumnBase, avisoSapPm.FindProperty("UbicacionTecnicaImg")!, apiReportesAvisoSapPmMappingBase);

            var tableMappings = new List<TableMapping>();
            avisoSapPm.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var avisosSapPmTable = new Table("AvisosSapPm", null, relationalModel);
            var idColumn = new Column("Id", "TEXT", avisosSapPmTable);
            avisosSapPmTable.Columns.Add("Id", idColumn);
            var descripcionCortaColumn = new Column("DescripcionCorta", "TEXT", avisosSapPmTable)
            {
                IsNullable = true
            };
            avisosSapPmTable.Columns.Add("DescripcionCorta", descripcionCortaColumn);
            var equipoContinuaOperandoColumn = new Column("EquipoContinuaOperando", "INTEGER", avisosSapPmTable);
            avisosSapPmTable.Columns.Add("EquipoContinuaOperando", equipoContinuaOperandoColumn);
            var eventoIdColumn = new Column("EventoId", "TEXT", avisosSapPmTable);
            avisosSapPmTable.Columns.Add("EventoId", eventoIdColumn);
            var fechaIncioAveriaColumn = new Column("FechaIncioAveria", "TEXT", avisosSapPmTable);
            avisosSapPmTable.Columns.Add("FechaIncioAveria", fechaIncioAveriaColumn);
            var horaInicioAveriaColumn = new Column("HoraInicioAveria", "TEXT", avisosSapPmTable);
            avisosSapPmTable.Columns.Add("HoraInicioAveria", horaInicioAveriaColumn);
            var modoFallaColumn = new Column("ModoFalla", "TEXT", avisosSapPmTable)
            {
                IsNullable = true
            };
            avisosSapPmTable.Columns.Add("ModoFalla", modoFallaColumn);
            var modoFallaImgColumn = new Column("ModoFallaImg", "TEXT", avisosSapPmTable)
            {
                IsNullable = true
            };
            avisosSapPmTable.Columns.Add("ModoFallaImg", modoFallaImgColumn);
            var parteObjectoAfectadaColumn = new Column("ParteObjectoAfectada", "TEXT", avisosSapPmTable)
            {
                IsNullable = true
            };
            avisosSapPmTable.Columns.Add("ParteObjectoAfectada", parteObjectoAfectadaColumn);
            var parteObjectoAfectadaImgColumn = new Column("ParteObjectoAfectadaImg", "TEXT", avisosSapPmTable)
            {
                IsNullable = true
            };
            avisosSapPmTable.Columns.Add("ParteObjectoAfectadaImg", parteObjectoAfectadaImgColumn);
            var solucionadoPorBECColumn = new Column("SolucionadoPorBEC", "INTEGER", avisosSapPmTable);
            avisosSapPmTable.Columns.Add("SolucionadoPorBEC", solucionadoPorBECColumn);
            var ubicacionTecnicaColumn = new Column("UbicacionTecnica", "TEXT", avisosSapPmTable)
            {
                IsNullable = true
            };
            avisosSapPmTable.Columns.Add("UbicacionTecnica", ubicacionTecnicaColumn);
            var ubicacionTecnicaImgColumn = new Column("UbicacionTecnicaImg", "TEXT", avisosSapPmTable)
            {
                IsNullable = true
            };
            avisosSapPmTable.Columns.Add("UbicacionTecnicaImg", ubicacionTecnicaImgColumn);
            var pK_AvisosSapPm = new UniqueConstraint("PK_AvisosSapPm", avisosSapPmTable, new[] { idColumn });
            avisosSapPmTable.PrimaryKey = pK_AvisosSapPm;
            var pK_AvisosSapPmUc = RelationalModel.GetKey(this,
                "Api.Reportes.AvisoSapPm",
                new[] { "Id" });
            pK_AvisosSapPm.MappedKeys.Add(pK_AvisosSapPmUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AvisosSapPmUc).Add(pK_AvisosSapPm);
            avisosSapPmTable.UniqueConstraints.Add("PK_AvisosSapPm", pK_AvisosSapPm);
            relationalModel.Tables.Add(("AvisosSapPm", null), avisosSapPmTable);
            var avisosSapPmTableMapping = new TableMapping(avisoSapPm, avisosSapPmTable, true);
            avisosSapPmTable.AddTypeMapping(avisosSapPmTableMapping, false);
            tableMappings.Add(avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, avisoSapPm.FindProperty("Id")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(descripcionCortaColumn, avisoSapPm.FindProperty("DescripcionCorta")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(equipoContinuaOperandoColumn, avisoSapPm.FindProperty("EquipoContinuaOperando")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(eventoIdColumn, avisoSapPm.FindProperty("EventoId")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(fechaIncioAveriaColumn, avisoSapPm.FindProperty("FechaIncioAveria")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(horaInicioAveriaColumn, avisoSapPm.FindProperty("HoraInicioAveria")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(modoFallaColumn, avisoSapPm.FindProperty("ModoFalla")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(modoFallaImgColumn, avisoSapPm.FindProperty("ModoFallaImg")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(parteObjectoAfectadaColumn, avisoSapPm.FindProperty("ParteObjectoAfectada")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(parteObjectoAfectadaImgColumn, avisoSapPm.FindProperty("ParteObjectoAfectadaImg")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(solucionadoPorBECColumn, avisoSapPm.FindProperty("SolucionadoPorBEC")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(ubicacionTecnicaColumn, avisoSapPm.FindProperty("UbicacionTecnica")!, avisosSapPmTableMapping);
            RelationalModel.CreateColumnMapping(ubicacionTecnicaImgColumn, avisoSapPm.FindProperty("UbicacionTecnicaImg")!, avisosSapPmTableMapping);

            var avisoY2 = FindEntityType("Api.Reportes.AvisoY2")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            avisoY2.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var apiReportesAvisoY2TableBase = new TableBase("Api.Reportes.AvisoY2", null, relationalModel);
            var corregidoPorMantenimientoColumnBase = new ColumnBase<ColumnMappingBase>("CorregidoPorMantenimiento", "INTEGER", apiReportesAvisoY2TableBase);
            apiReportesAvisoY2TableBase.Columns.Add("CorregidoPorMantenimiento", corregidoPorMantenimientoColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", apiReportesAvisoY2TableBase);
            apiReportesAvisoY2TableBase.Columns.Add("Id", idColumnBase0);
            var idEventoColumnBase = new ColumnBase<ColumnMappingBase>("IdEvento", "TEXT", apiReportesAvisoY2TableBase);
            apiReportesAvisoY2TableBase.Columns.Add("IdEvento", idEventoColumnBase);
            var numeroAvisoY2ColumnBase = new ColumnBase<ColumnMappingBase>("NumeroAvisoY2", "INTEGER", apiReportesAvisoY2TableBase);
            apiReportesAvisoY2TableBase.Columns.Add("NumeroAvisoY2", numeroAvisoY2ColumnBase);
            relationalModel.DefaultTables.Add("Api.Reportes.AvisoY2", apiReportesAvisoY2TableBase);
            var apiReportesAvisoY2MappingBase = new TableMappingBase<ColumnMappingBase>(avisoY2, apiReportesAvisoY2TableBase, true);
            apiReportesAvisoY2TableBase.AddTypeMapping(apiReportesAvisoY2MappingBase, false);
            defaultTableMappings0.Add(apiReportesAvisoY2MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, avisoY2.FindProperty("Id")!, apiReportesAvisoY2MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)corregidoPorMantenimientoColumnBase, avisoY2.FindProperty("CorregidoPorMantenimiento")!, apiReportesAvisoY2MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idEventoColumnBase, avisoY2.FindProperty("IdEvento")!, apiReportesAvisoY2MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)numeroAvisoY2ColumnBase, avisoY2.FindProperty("NumeroAvisoY2")!, apiReportesAvisoY2MappingBase);

            var tableMappings0 = new List<TableMapping>();
            avisoY2.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var avisosY2Table = new Table("AvisosY2", null, relationalModel);
            var idColumn0 = new Column("Id", "TEXT", avisosY2Table);
            avisosY2Table.Columns.Add("Id", idColumn0);
            var corregidoPorMantenimientoColumn = new Column("CorregidoPorMantenimiento", "INTEGER", avisosY2Table);
            avisosY2Table.Columns.Add("CorregidoPorMantenimiento", corregidoPorMantenimientoColumn);
            var idEventoColumn = new Column("IdEvento", "TEXT", avisosY2Table);
            avisosY2Table.Columns.Add("IdEvento", idEventoColumn);
            var numeroAvisoY2Column = new Column("NumeroAvisoY2", "INTEGER", avisosY2Table);
            avisosY2Table.Columns.Add("NumeroAvisoY2", numeroAvisoY2Column);
            var pK_AvisosY2 = new UniqueConstraint("PK_AvisosY2", avisosY2Table, new[] { idColumn0 });
            avisosY2Table.PrimaryKey = pK_AvisosY2;
            var pK_AvisosY2Uc = RelationalModel.GetKey(this,
                "Api.Reportes.AvisoY2",
                new[] { "Id" });
            pK_AvisosY2.MappedKeys.Add(pK_AvisosY2Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AvisosY2Uc).Add(pK_AvisosY2);
            avisosY2Table.UniqueConstraints.Add("PK_AvisosY2", pK_AvisosY2);
            relationalModel.Tables.Add(("AvisosY2", null), avisosY2Table);
            var avisosY2TableMapping = new TableMapping(avisoY2, avisosY2Table, true);
            avisosY2Table.AddTypeMapping(avisosY2TableMapping, false);
            tableMappings0.Add(avisosY2TableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, avisoY2.FindProperty("Id")!, avisosY2TableMapping);
            RelationalModel.CreateColumnMapping(corregidoPorMantenimientoColumn, avisoY2.FindProperty("CorregidoPorMantenimiento")!, avisosY2TableMapping);
            RelationalModel.CreateColumnMapping(idEventoColumn, avisoY2.FindProperty("IdEvento")!, avisosY2TableMapping);
            RelationalModel.CreateColumnMapping(numeroAvisoY2Column, avisoY2.FindProperty("NumeroAvisoY2")!, avisosY2TableMapping);

            var evento = FindEntityType("Api.Reportes.Evento")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            evento.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var apiReportesEventoTableBase = new TableBase("Api.Reportes.Evento", null, relationalModel);
            var categoriaColumnBase = new ColumnBase<ColumnMappingBase>("Categoria", "TEXT", apiReportesEventoTableBase)
            {
                IsNullable = true
            };
            apiReportesEventoTableBase.Columns.Add("Categoria", categoriaColumnBase);
            var cerradoPorColumnBase = new ColumnBase<ColumnMappingBase>("CerradoPor", "TEXT", apiReportesEventoTableBase)
            {
                IsNullable = true
            };
            apiReportesEventoTableBase.Columns.Add("CerradoPor", cerradoPorColumnBase);
            var coordenadasColumnBase = new ColumnBase<ColumnMappingBase>("Coordenadas", "TEXT", apiReportesEventoTableBase)
            {
                IsNullable = true
            };
            apiReportesEventoTableBase.Columns.Add("Coordenadas", coordenadasColumnBase);
            var creadoPorColumnBase = new ColumnBase<ColumnMappingBase>("CreadoPor", "TEXT", apiReportesEventoTableBase)
            {
                IsNullable = true
            };
            apiReportesEventoTableBase.Columns.Add("CreadoPor", creadoPorColumnBase);
            var fechaFinColumnBase = new ColumnBase<ColumnMappingBase>("FechaFin", "TEXT", apiReportesEventoTableBase);
            apiReportesEventoTableBase.Columns.Add("FechaFin", fechaFinColumnBase);
            var fechaInicioColumnBase = new ColumnBase<ColumnMappingBase>("FechaInicio", "TEXT", apiReportesEventoTableBase);
            apiReportesEventoTableBase.Columns.Add("FechaInicio", fechaInicioColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", apiReportesEventoTableBase);
            apiReportesEventoTableBase.Columns.Add("Id", idColumnBase1);
            var impactoColumnBase = new ColumnBase<ColumnMappingBase>("Impacto", "INTEGER", apiReportesEventoTableBase);
            apiReportesEventoTableBase.Columns.Add("Impacto", impactoColumnBase);
            var mapaUrlColumnBase = new ColumnBase<ColumnMappingBase>("MapaUrl", "TEXT", apiReportesEventoTableBase)
            {
                IsNullable = true
            };
            apiReportesEventoTableBase.Columns.Add("MapaUrl", mapaUrlColumnBase);
            var prioridadColumnBase = new ColumnBase<ColumnMappingBase>("Prioridad", "TEXT", apiReportesEventoTableBase)
            {
                IsNullable = true
            };
            apiReportesEventoTableBase.Columns.Add("Prioridad", prioridadColumnBase);
            var puestoSeguridadColumnBase = new ColumnBase<ColumnMappingBase>("PuestoSeguridad", "TEXT", apiReportesEventoTableBase)
            {
                IsNullable = true
            };
            apiReportesEventoTableBase.Columns.Add("PuestoSeguridad", puestoSeguridadColumnBase);
            var tipoEventoColumnBase = new ColumnBase<ColumnMappingBase>("TipoEvento", "TEXT", apiReportesEventoTableBase)
            {
                IsNullable = true
            };
            apiReportesEventoTableBase.Columns.Add("TipoEvento", tipoEventoColumnBase);
            var tipoEventoImagenColumnBase = new ColumnBase<ColumnMappingBase>("TipoEventoImagen", "TEXT", apiReportesEventoTableBase)
            {
                IsNullable = true
            };
            apiReportesEventoTableBase.Columns.Add("TipoEventoImagen", tipoEventoImagenColumnBase);
            var tituloColumnBase = new ColumnBase<ColumnMappingBase>("Titulo", "TEXT", apiReportesEventoTableBase)
            {
                IsNullable = true
            };
            apiReportesEventoTableBase.Columns.Add("Titulo", tituloColumnBase);
            relationalModel.DefaultTables.Add("Api.Reportes.Evento", apiReportesEventoTableBase);
            var apiReportesEventoMappingBase = new TableMappingBase<ColumnMappingBase>(evento, apiReportesEventoTableBase, true);
            apiReportesEventoTableBase.AddTypeMapping(apiReportesEventoMappingBase, false);
            defaultTableMappings1.Add(apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, evento.FindProperty("Id")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoriaColumnBase, evento.FindProperty("Categoria")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cerradoPorColumnBase, evento.FindProperty("CerradoPor")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)coordenadasColumnBase, evento.FindProperty("Coordenadas")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creadoPorColumnBase, evento.FindProperty("CreadoPor")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fechaFinColumnBase, evento.FindProperty("FechaFin")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fechaInicioColumnBase, evento.FindProperty("FechaInicio")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)impactoColumnBase, evento.FindProperty("Impacto")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mapaUrlColumnBase, evento.FindProperty("MapaUrl")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)prioridadColumnBase, evento.FindProperty("Prioridad")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)puestoSeguridadColumnBase, evento.FindProperty("PuestoSeguridad")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tipoEventoColumnBase, evento.FindProperty("TipoEvento")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tipoEventoImagenColumnBase, evento.FindProperty("TipoEventoImagen")!, apiReportesEventoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tituloColumnBase, evento.FindProperty("Titulo")!, apiReportesEventoMappingBase);

            var tableMappings1 = new List<TableMapping>();
            evento.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var eventosTable = new Table("Eventos", null, relationalModel);
            var idColumn1 = new Column("Id", "TEXT", eventosTable);
            eventosTable.Columns.Add("Id", idColumn1);
            var categoriaColumn = new Column("Categoria", "TEXT", eventosTable)
            {
                IsNullable = true
            };
            eventosTable.Columns.Add("Categoria", categoriaColumn);
            var cerradoPorColumn = new Column("CerradoPor", "TEXT", eventosTable)
            {
                IsNullable = true
            };
            eventosTable.Columns.Add("CerradoPor", cerradoPorColumn);
            var coordenadasColumn = new Column("Coordenadas", "TEXT", eventosTable)
            {
                IsNullable = true
            };
            eventosTable.Columns.Add("Coordenadas", coordenadasColumn);
            var creadoPorColumn = new Column("CreadoPor", "TEXT", eventosTable)
            {
                IsNullable = true
            };
            eventosTable.Columns.Add("CreadoPor", creadoPorColumn);
            var fechaFinColumn = new Column("FechaFin", "TEXT", eventosTable);
            eventosTable.Columns.Add("FechaFin", fechaFinColumn);
            var fechaInicioColumn = new Column("FechaInicio", "TEXT", eventosTable);
            eventosTable.Columns.Add("FechaInicio", fechaInicioColumn);
            var impactoColumn = new Column("Impacto", "INTEGER", eventosTable);
            eventosTable.Columns.Add("Impacto", impactoColumn);
            var mapaUrlColumn = new Column("MapaUrl", "TEXT", eventosTable)
            {
                IsNullable = true
            };
            eventosTable.Columns.Add("MapaUrl", mapaUrlColumn);
            var prioridadColumn = new Column("Prioridad", "TEXT", eventosTable)
            {
                IsNullable = true
            };
            eventosTable.Columns.Add("Prioridad", prioridadColumn);
            var puestoSeguridadColumn = new Column("PuestoSeguridad", "TEXT", eventosTable)
            {
                IsNullable = true
            };
            eventosTable.Columns.Add("PuestoSeguridad", puestoSeguridadColumn);
            var tipoEventoColumn = new Column("TipoEvento", "TEXT", eventosTable)
            {
                IsNullable = true
            };
            eventosTable.Columns.Add("TipoEvento", tipoEventoColumn);
            var tipoEventoImagenColumn = new Column("TipoEventoImagen", "TEXT", eventosTable)
            {
                IsNullable = true
            };
            eventosTable.Columns.Add("TipoEventoImagen", tipoEventoImagenColumn);
            var tituloColumn = new Column("Titulo", "TEXT", eventosTable)
            {
                IsNullable = true
            };
            eventosTable.Columns.Add("Titulo", tituloColumn);
            var pK_Eventos = new UniqueConstraint("PK_Eventos", eventosTable, new[] { idColumn1 });
            eventosTable.PrimaryKey = pK_Eventos;
            var pK_EventosUc = RelationalModel.GetKey(this,
                "Api.Reportes.Evento",
                new[] { "Id" });
            pK_Eventos.MappedKeys.Add(pK_EventosUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_EventosUc).Add(pK_Eventos);
            eventosTable.UniqueConstraints.Add("PK_Eventos", pK_Eventos);
            relationalModel.Tables.Add(("Eventos", null), eventosTable);
            var eventosTableMapping = new TableMapping(evento, eventosTable, true);
            eventosTable.AddTypeMapping(eventosTableMapping, false);
            tableMappings1.Add(eventosTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, evento.FindProperty("Id")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(categoriaColumn, evento.FindProperty("Categoria")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(cerradoPorColumn, evento.FindProperty("CerradoPor")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(coordenadasColumn, evento.FindProperty("Coordenadas")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(creadoPorColumn, evento.FindProperty("CreadoPor")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(fechaFinColumn, evento.FindProperty("FechaFin")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(fechaInicioColumn, evento.FindProperty("FechaInicio")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(impactoColumn, evento.FindProperty("Impacto")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(mapaUrlColumn, evento.FindProperty("MapaUrl")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(prioridadColumn, evento.FindProperty("Prioridad")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(puestoSeguridadColumn, evento.FindProperty("PuestoSeguridad")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(tipoEventoColumn, evento.FindProperty("TipoEvento")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(tipoEventoImagenColumn, evento.FindProperty("TipoEventoImagen")!, eventosTableMapping);
            RelationalModel.CreateColumnMapping(tituloColumn, evento.FindProperty("Titulo")!, eventosTableMapping);

            var firma = FindEntityType("Api.Reportes.Firma")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            firma.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var apiReportesFirmaTableBase = new TableBase("Api.Reportes.Firma", null, relationalModel);
            var eventoIdColumnBase0 = new ColumnBase<ColumnMappingBase>("EventoId", "TEXT", apiReportesFirmaTableBase);
            apiReportesFirmaTableBase.Columns.Add("EventoId", eventoIdColumnBase0);
            var firmaImagenColumnBase = new ColumnBase<ColumnMappingBase>("FirmaImagen", "TEXT", apiReportesFirmaTableBase)
            {
                IsNullable = true
            };
            apiReportesFirmaTableBase.Columns.Add("FirmaImagen", firmaImagenColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", apiReportesFirmaTableBase);
            apiReportesFirmaTableBase.Columns.Add("Id", idColumnBase2);
            relationalModel.DefaultTables.Add("Api.Reportes.Firma", apiReportesFirmaTableBase);
            var apiReportesFirmaMappingBase = new TableMappingBase<ColumnMappingBase>(firma, apiReportesFirmaTableBase, true);
            apiReportesFirmaTableBase.AddTypeMapping(apiReportesFirmaMappingBase, false);
            defaultTableMappings2.Add(apiReportesFirmaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, firma.FindProperty("Id")!, apiReportesFirmaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventoIdColumnBase0, firma.FindProperty("EventoId")!, apiReportesFirmaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)firmaImagenColumnBase, firma.FindProperty("FirmaImagen")!, apiReportesFirmaMappingBase);

            var tableMappings2 = new List<TableMapping>();
            firma.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var firmasTable = new Table("Firmas", null, relationalModel);
            var idColumn2 = new Column("Id", "TEXT", firmasTable);
            firmasTable.Columns.Add("Id", idColumn2);
            var eventoIdColumn0 = new Column("EventoId", "TEXT", firmasTable);
            firmasTable.Columns.Add("EventoId", eventoIdColumn0);
            var firmaImagenColumn = new Column("FirmaImagen", "TEXT", firmasTable)
            {
                IsNullable = true
            };
            firmasTable.Columns.Add("FirmaImagen", firmaImagenColumn);
            var pK_Firmas = new UniqueConstraint("PK_Firmas", firmasTable, new[] { idColumn2 });
            firmasTable.PrimaryKey = pK_Firmas;
            var pK_FirmasUc = RelationalModel.GetKey(this,
                "Api.Reportes.Firma",
                new[] { "Id" });
            pK_Firmas.MappedKeys.Add(pK_FirmasUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_FirmasUc).Add(pK_Firmas);
            firmasTable.UniqueConstraints.Add("PK_Firmas", pK_Firmas);
            relationalModel.Tables.Add(("Firmas", null), firmasTable);
            var firmasTableMapping = new TableMapping(firma, firmasTable, true);
            firmasTable.AddTypeMapping(firmasTableMapping, false);
            tableMappings2.Add(firmasTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, firma.FindProperty("Id")!, firmasTableMapping);
            RelationalModel.CreateColumnMapping(eventoIdColumn0, firma.FindProperty("EventoId")!, firmasTableMapping);
            RelationalModel.CreateColumnMapping(firmaImagenColumn, firma.FindProperty("FirmaImagen")!, firmasTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
